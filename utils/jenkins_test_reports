#!/usr/bin/env python

import os
import xml.etree.ElementTree as ET
from StringIO import StringIO
from docutils.core import publish_string
from fabric.api import run, settings
from fabric.decorators import hosts
from fabric.context_managers import hide
from fabric.tasks import execute


MIRROR_HOST = "root@mirror.xivo.fr"
TEST_RESULT_FILE = '/tmp/tests-report-xivo-auto-%s.html'
path = '/data/test_results'

TEXT_HEADER = """
***************************
XiVO AUTOMATIC TEST REPORTS
***************************

The tests listed here were all passing at the moment of the release.

.. contents::


"""


@hosts(MIRROR_HOST)
def get_xivo_rc_version():
    with settings():
        with hide('running', 'stdout'):
            output = run('reprepro -vb /data/reprepro/xivo ls pf-xivo | grep squeeze-xivo-skaro-rc | egrep -Eo "([0-9]{2}\.[0-9]{2})~" | sed "s/~//"')
    return output


def get_features(path):
    dirs = os.listdir(path)
    export = {}
    for file in dirs:
        if file.endswith('xml'):
            xml_file_path = os.path.join(path, file)
            tree = ET.parse(xml_file_path)
            root = tree.getroot()

            for child in root:
                feature_name, scenario_title = child.attrib['classname'].split(':', 1)
                feature_name = feature_name.strip()
                scenario_title = scenario_title.strip()
                if feature_name not in export:
                    export[feature_name] = []
                if scenario_title not in export[feature_name]:
                    export[feature_name].append(scenario_title)
    return export


def format_features(export):
    fobj = StringIO()
    fobj.write(TEXT_HEADER)

    for feature_name in sorted(export.keys()):
        scenario_title_list = export[feature_name]
        _format_feature(fobj, feature_name, scenario_title_list)

    result = fobj.getvalue()
    fobj.close()
    return result


def _format_feature(fobj, feature_name, scenarios):
    formatted_scenarios = ['* %s' % scenario for scenario in scenarios]
    feature_info = {'feature_name': feature_name,
                    'title_decoration': '=' * len(feature_name),
                    'scenarios': '\n'.join(formatted_scenarios)}
    fobj.write('\n\n%(feature_name)s\n%(title_decoration)s\n\n%(scenarios)s\n' % feature_info)


def write_output_file(formatted_text, output_file):
    output_html = publish_string(formatted_text, writer_name='html')

    with open(output_file, 'w') as fobj:
        fobj.write(output_html)


if __name__ == '__main__':
    xivo_version_rc = execute(get_xivo_rc_version)
    features = get_features(path)
    formatted_text = format_features(features)
    write_output_file(formatted_text, TEST_RESULT_FILE % xivo_version_rc[MIRROR_HOST])
